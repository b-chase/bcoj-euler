# https://projecteuler.net/problem=61
"""<p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:</p>
</tr></table><p>The ordered set of three $4$-digit numbers: $8128$, $2882$, $8281$, has three interesting properties.</p>
<ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li>
<li>Each polygonal type: triangle ($P_{3,127}=8128$), square ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a different number in the set.</li>
<li>This is the only set of $4$-digit numbers with this property.</li>
</ol><p>Find the sum of the only ordered set of six cyclic $4$-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p>

"""

import euler_math as em

def fig_nums(diff_rule, max_num=10_000) -> list[int]:
    
    diff = 1
    n = 0
    output = []
    while n < max_num:
        n += diff
        output.append(n)
        diff = diff_rule(diff)
        
    
    return output

def solve(debug=False):
    all_figs = set()
    fig_nums = {}
    for i in range(1,8):
        figs = fig_nums(lambda x: x+i, 10000) 
        for fn in figs:
            if fn % 100 >= 10:
                fig_nums[fn] = i
                all_figs.add(fn)
    
    def matching_rule(num1, num2):
        return num1//100 == num2 % 100
    
    
    def find_next_match(matched_fig_types: set, loop_start: int):
        if len(matched_fig_types) == 6:
            return matched_fig_types
        
        for fig in all_figs:
            if fig_nums[fig] in matched_fig_types:
                continue
            
            
    
    
    
    
    
    
    
    print(f"*** Answer: {res} ***")