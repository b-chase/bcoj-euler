"""<p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:
$$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots$$</p>
<p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>
<p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the value of $D$?</p>
"""

import euler_math as em

def solve(debug=False):
    # P_n = n(3n-1)/2
    # P_m - P_m-1 = 4 + 3j  (4, 7, 10, 13, etc)
    # So P_m - P_q = (m - q) * ( 4 + 3j ) = n(3n-1)/2

    res=None

    def is_pent(pn) -> bool:
        gn = em.int_sqrt((2 * pn) // 3)
        
        for i in range(2):
            guess_n = gn+i
            tmp = guess_n*(3*guess_n-1)

            if tmp // 2 == pn:
                return True
        return False

    pent_nums = set()

    p_triplets = set()

    p_sums = dict()

    p = 1
    delta = 4
    pent_nums.add(p)
    i = 1
    while True:
        p += delta
        delta += 3
        i += 1

        if p in p_sums:
            res = p_sums[p]
            break

        # need at least 3 to check for differences
        if i >= 3:
            for other_p in pent_nums:
                sub_p = p - other_p
                if sub_p in pent_nums:
                    triplet = tuple(sorted([other_p, sub_p, p]))
                    p_triplets.add(triplet)
                    add_p = p + other_p
                    p_sums[add_p] = sub_p

                    if debug:
                        print(triplet)

        if debug and p > 100000000000:
            break

        pent_nums.add(p)

    
    print(f"*** Answer: {res} ***")